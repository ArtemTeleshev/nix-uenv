#!/usr/bin/env bash

NAME="go-help"

if [ ! -x "$(which realpath)" ]; then
  echo "[${NAME}] The 'realpath' is not installed"
  exit 1
fi

ACTION=${1,,}
SCRIPT=$(realpath "${BASH_SOURCE[0]}")
NAME=$(basename ${SCRIPT})
DIR=$(dirname "$(dirname "${SCRIPT}")")

if [ -f "${DIR}/lib/render_functions" ]; then
  . "${DIR}/lib/render_functions"
else
  echo "[${NAME}] Cannot include: '${DIR}/lib/render_functions'"
  exit 1
fi

function action_test() { # {{{
  render_title    "Tests"
  render_comment  "Run all tests"
  render_command  "go test -race -cover -v"
  render_comment  "Run one test"
  render_command  "go test -race -cover -v -run=%name%"
  render_comment  "Run two tests"
  render_command  "go test -race -cover -v -run=%name_1%\|%name_2%"
  render_comment  "Run part of tests"
  render_command  "go test -race -cover -v -run=%regexp%"
  render_subtitle "Conclusions"
  render_warning  "What are you waiting for? Run 'go test -race' on your code today!"
  render_link     "Details" "https://blog.golang.org/race-detector"
  render_newline
} # }}}

function action_cover() { # {{{
  render_title "Coverage"
  render_comment "Given a coverage profile produced by 'go test'"
  render_command "go test -coverprofile=cover.out"
  render_subtitle "CLI"
  render_comment "Display coverage percentages to stdout for each function"
  render_command "go tool cover -func=cover.out"
  render_subtitle "HTML"
  render_comment "Open a web browser displaying annotated source code"
  render_command "go tool cover -html=cover.out"
  render_newline
} # }}}

function action_bench() { # {{{
  render_title "Benchmarks"
  render_comment "Run all benchmarks"
  render_command "go test -v -run=^$ -benchmem -bench=."
  render_comment "Run one benchmark"
  render_command "go test -v -run=^$ -benchmem -bench=%name%"
  render_comment "Run two benchmarks"
  render_command "go test -v -run=^$ -benchmem -bench=%name_1%\|%name_2%"
  render_comment "Run part of benchmarks"
  render_command "go test -v -run=^$ -benchmem -bench=%regexp%"
  render_subtitle "CPU"
  render_comment "Run all benchmarks with CPU profiling"
  render_command "go test -v -run=^$ -benchmem -benchtime=3s -bench=. -cpuprofile=cpu.1.out | tee cpu.1.profile"
  render_comment "Make improvements to optimize of use CPU ..."
  render_command "go test -v -run=^$ -benchmem -benchtime=3s -bench=. -cpuprofile=cpu.2.out | tee cpu.2.profile"
  render_comment "Compare CPU benchmarks"
  render_command "benchcmp cpu.1.profile cpu.2.profile"
  render_subtitle "Memory"
  render_comment "Run all benchmarks with memory profiling"
  render_command "go test -v -run=^$ -benchmem -benchtime=3s -bench=. -memprofile=mem.1.out | tee mem.1.profile"
  render_comment "Make improvements to optimize of use memory ..."
  render_command "go test -v -run=^$ -benchmem -benchtime=3s -bench=. -memprofile=mem.2.out | tee mem.2.profile"
  render_comment "Compare memory benchmarks"
  render_command "benchcmp mem.1.profile mem.2.profile"
  render_newline
} # }}}

function action_pprof() { # {{{
  render_title "Package profiling"
  render_comment "Usage"
  render_command "go tool pprof [options] [binary] <profile source> ..."
  render_subtitle "CPU"
  render_comment "Analyze CPU results"
  render_command "go tool pprof %package%.test cpu.1.out"
  render_comment "Outputs a graph in PDF format"
  render_command "go tool pprof -pdf %package%.test cpu.1.out > cpu.1.pdf"
  render_subtitle "Memory"
  render_comment "Analyze memory results with display allocated memory size"
  render_command "go tool pprof --alloc_space %package%.test mem.1.out"
  render_comment "Analyze memory results with display allocated object counts"
  render_command "go tool pprof --alloc_objects %package%.test mem.1.out"
  render_newline
} # }}}

# --[ code ]--

function action_code_recover() { # {{{
  render_code "// Catch panic and convert in to error
package main

import \"fmt\"

func main() {
  var err error
  err = f(1)
  fmt.Println(\"f(1) - done: error =\", err)
  err = f(0)
  fmt.Println(\"f(0) - done: error =\", err)
}

func f(i int) (err error) {
  defer func() {
    if r := recover(); r != nil {
      err = fmt.Errorf(\"panic: %v\", r)
    }
  }()
  g(i)
  return
}

func g(i int) {
  if i == 0 {
    panic(\"i - cannot be zero\")
  }
}"
} # }}}

function action_code_timeout() { # {{{
  render_code "// Timeout: chan + select + sync.WaitGroup + (time.Timer vs time.Sleep)
package main

import \"fmt\"
import \"time\"
import \"sync\"

func main() {
  f(1, 2, 1)
  f(2, 1, 1)
}

func f(i, j, k int) {
  var n int
  var wg sync.WaitGroup
  done := make(chan int, 3)
  defer close(done)
  wg.Add(2)

  go func() { // Timer
    defer wg.Done()
    timer := time.NewTimer(time.Second * time.Duration(i))
    <-timer.C
    fmt.Println(\"Timer finished:\", i)
    done <- i
  }() // EndTime
  go func() { // Sleep
    defer wg.Done()
    time.Sleep(time.Second * time.Duration(j))
    fmt.Println(\"Sleep finished:\", j)
    done <- j
  }() // EndSleep
  go func() { // Wait
    wg.Wait()
    fmt.Println(\"WaitGroup finished:\", k)
    done <- k
  }() // EndWait

  for {
    select {
    case v := <-done:
      n += v
      if n == i+j+k {
        fmt.Println(\"f(i, j, k int) finished:\", n)
        return
      }
    }
  }
}"
} # }}}

function action_code_help() { # {{{
  echo "Usage: ${NAME} ${ACTION} {recover|timeout}"
} # }}}

function action_code() { # {{{
  case "${1}" in
    recover)   action_code_recover  ;;
    timeout)   action_code_timeout  ;;
    *)         action_code_help     ;;
  esac
} # }}}

# --[ /code ]--

function action_help() { # {{{
  echo "Usage: ${NAME} {test|cover|bench|pprof|code}"
} # }}}

case "${ACTION}" in
  test)   action_test      ;;
  cover)  action_cover     ;;
  bench)  action_bench     ;;
  pprof)  action_pprof     ;;
  code)   action_code ${2} ;;
  *)      action_help      ;;
esac
